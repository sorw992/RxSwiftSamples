


import UIKit
import RxSwift
import RxCocoa

class ViewControllerReactiveFoodTableView: UIViewController, UITableViewDelegate {
    
    // 1- transform our array of strings into an observable sequence that will become the datasource of the table view. this will be the datasource for table view. so whe have to use Observable.just() operator
    //let tableViewItems = ["item 1", "item 2", "item 3", "item 4"]
    // just operator means our observable will emit all these four elements
    let tableViewItems = Observable.just(["item 1", "item 2", "item 3", "item 4"])
    
    let disposebag = DisposeBag()
    
    @IBOutlet var tableView: UITableView!
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        
        // 2- bind tableViewItems to our table view.
        
        tableViewItems
        // bind the observable(tableViewItems) to the code that executes each row in the table view with the aid of the rx item cell identifier method
            .bind(to: tableView
                .rx
                  // executes each row in the table view with items(cellIdentifier) method
                .items(cellIdentifier: "apiCell")) {
                    
                    // the rx framework knows call the default two methods of table view (datasource methods)
                    // the values normally generated by table view number of rows and number of section now automatically calculated based by observed data
                    // this is the three items we receive in this closure
                    // tv is table view
                    (tv, tableViewItem, cell) in
                    cell.textLabel?.text = tableViewItem
                    
                }
                // take care of memory management
                .disposed(by: disposebag)
    }
    
}


