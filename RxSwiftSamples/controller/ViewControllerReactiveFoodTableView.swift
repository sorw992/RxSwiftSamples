
//
//  RxSwift Samples
//
//  Created by Soroush Sarlak on 6/29/22.
//

import UIKit
import RxSwift
import RxCocoa

class ViewControllerReactiveFoodTableView: UIViewController {
   
    // 1- transform our array of strings into an observable sequence that will become the datasource of the table view. this will be the datasource for table view. so whe have to use Observable.just() operator
    //let tableViewItems = ["item 1", "item 2", "item 3", "item 4"]
    // just operator means our observable will emit all these four elements
    let tableViewItems = Observable.just([Food(name: "Hamburger", image: "hamburger"), Food(name: "Pizza", image: "pizza"), Food(name: "Salmon", image: "salmon"), Food(name: "Spaghetti", image: "spaghetti")])
    
    let disposebag = DisposeBag()
    
    @IBOutlet var tableView: UITableView!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        
        // 2- bind tableViewItems (Observable) to our table view.
        tableViewItems
        // bind the observable(tableViewItems) to the code that executes each row in the table view with the aid of the rx item cell identifier method
            .bind(to: tableView
                .rx
                  // executes each row in the table view with items(cellIdentifier) method
                .items(cellIdentifier: "apiCell", cellType: FoodTableViewCell.self)) {
                    
                    // the rx framework knows call the default two methods of table view (datasource methods)
                    // the values normally generated by table view number of rows and number of section now automatically calculated based by observed data
                    // this is the three items we receive in this closure
                    // tv is table view
                    (tv, tableViewItem, cell) in
                    cell.foodLabel.text = tableViewItem.name
                    cell.foodImageView.image = UIImage.init(named: tableViewItem.image)
                    
                }
        // take care of memory management
                .disposed(by: disposebag)
        
        
        // rx version of UITableView's didSelectRowAt method
        // model is used to display the rows in our table view
        // Food.self is an observable that we need to subscribe to it using subscribe method
        tableView
        // modelSelected is for receiving modal object and itemSelected receives indexpath (classic)
            .rx.modelSelected(Food.self)
        
            .subscribe { foodObject in
                // onNext method
                let foodVC = self.storyboard?.instantiateViewController(withIdentifier: "ViewControllerFoodDetail") as! ViewControllerFoodDetail
                //foodVC.imageName = foodObject.image
                
                // imageName is a behavior relay so we need to accept food object image
                foodVC.imageName.accept(foodObject.image)
                
                self.navigationController?.pushViewController(foodVC, animated: true)
                
                
            } onError: { error in
                print("error", error.localizedDescription)
            } onCompleted: {
                
            } onDisposed: {
                
            }
        
            .disposed(by: disposebag)
        
        
        // modelSelected is for receiving modal object and itemSelected receives indexpath (classic)
        // if you need to work with indexpath, u can use itemSelected method
        tableView
            .rx
            .itemSelected
            .subscribe { indexPath in
                
                // on next
                
                print("indexpath.row", indexPath.row)
                
            } onError: { error in
                print("error", error.localizedDescription)
            } onCompleted: {
                
            } onDisposed: {
              
            }
            .disposed(by: disposebag)
        
        
        // todo: question set cell height with rxswift
        
    }
    
    /*
     func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
     let foodVC = self.storyboard?.instantiateViewController(withIdentifier: "ViewControllerFoodDetail") as! ViewControllerFoodDetail
     
     foodVC.imageName = "hamburger"
     
     self.navigationController?.pushViewController(self, animated: true)
     
     }
     
     */
    
    
    
}


extension ViewControllerReactiveFoodTableView : UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 160
        
    }
    
}
